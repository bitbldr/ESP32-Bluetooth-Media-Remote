/**
 * This example turns the ESP32 into a Bluetooth LE keyboard that writes the words, presses Enter, presses a media key and then Ctrl+Alt+Delete
 */
#include <Arduino.h>
#include <cstdio>

// #define USE_NIMBLE
// #include <BleKeyboard.h>

// #include "buttons.h"

// BleKeyboard bleKeyboard;

// uint8_t GPIO0 = 0;
// uint8_t PWR_ON = 14;

uint8_t PWR_LED = 13;
uint8_t PLAY_PAUSE = 15;
uint8_t VOL_UP = 18;
uint8_t VOL_DOWN = 19;

#define timeSeconds 1000
#define debounce_ms 500
#define debug_en true
unsigned long now = millis();
unsigned long playPauseTrigger = 0;
unsigned long volUpTrigger = 0;
unsigned long volDownTrigger = 0;

RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR int clickCount = 0;

void debug(const char *msg)
{
  if (debug_en)
  {
    Serial.println(msg);
  }
}

void goToSleep()
{
  Serial.println("Going to sleep now");
  digitalWrite(PWR_LED, LOW);
  // esp_deep_sleep_start();
  esp_light_sleep_start();
}

void onPlayPauseClick()
{
  Serial.println("Play/Pause clicked! " + String(clickCount));
  clickCount++;

  // goToSleep();
}

void volUp()
{
  Serial.println("volUp");
}

void volDown()
{
  Serial.println("volDown");
}

// Function that prints the reason by which ESP32 has been awaken from sleep
void print_wakeup_reason()
{
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch (wakeup_reason)
  {
  case 1:
    Serial.println("Wakeup caused by external signal using RTC_IO");
    break;
  case 2:
    Serial.println("Wakeup caused by external signal using RTC_CNTL");
    break;
  case 3:
    Serial.println("Wakeup caused by timer");
    break;
  case 4:
    Serial.println("Wakeup caused by touchpad");
    break;
  case 5:
    Serial.println("Wakeup caused by ULP program");
    break;
  default:
    Serial.println("Wakeup was not caused by deep sleep");
    break;
  }
}

void setup()
{
  Serial.begin(115200);
  delay(1000);

  // Serial.println("Starting BLE work!");
  // bleKeyboard.setName("BT Media Remote");
  // bleKeyboard.begin();

  ++bootCount;
  Serial.println("Boot count: " + String(bootCount));

  // Print the wakeup reason for ESP32
  print_wakeup_reason();

  pinMode(PWR_LED, OUTPUT);
  digitalWrite(PWR_LED, HIGH);

  pinMode(PLAY_PAUSE, INPUT_PULLUP);
  pinMode(VOL_UP, INPUT_PULLUP);
  pinMode(VOL_DOWN, INPUT_PULLUP);

  // pinMode(PWR_ON, OUTPUT);
  // pinMode(GPIO0, OUTPUT);
  // digitalWrite(GPIO0, LOW);

  // digitalWrite(PWR_ON, LOW);
  // delay(500);

  // attachInterrupt(digitalPinToInterrupt(PLAY_PAUSE), playPauseInterrupt, RISING);
  // attachInterrupt(digitalPinToInterrupt(VOL_UP), volUpInterrupt, RISING);
  // attachInterrupt(digitalPinToInterrupt(VOL_DOWN), volDownInterrupt, RISING);

  // onClick(PLAY_PAUSE, onPlayPauseClick);

  attachInterrupt(digitalPinToInterrupt(PLAY_PAUSE), onPlayPauseClick, RISING);

  // attachInterrupt(digitalPinToInterrupt(VOL_UP), volUp, LOW);
  // attachInterrupt(digitalPinToInterrupt(VOL_DOWN), volDown, LOW);

  // // allow button press to wake up the controller
  // // gpio_wakeup_enable(PLAY_PAUSE, LOW);
  // // esp_sleep_enable_gpio_wakeup();
  // esp_sleep_enable_ext0_wakeup(GPIO_NUM_15, 0);
  // esp_sleep_enable_ext0_wakeup(GPIO_NUM_18, 0);
  // esp_sleep_enable_ext0_wakeup(GPIO_NUM_19, 0);

  // goToSleep();

  // if (bootCount < 1)
  // {
  //   goToSleep();
  // }
}

void loop()
{
  // processButtonEvents();

  // if (bleKeyboard.isConnected())
  // {
  //   if (digitalRead(PLAY_PAUSE) == LOW)
  //   {
  //     digitalWrite(LED_BUILTIN, HIGH);
  //     bleKeyboard.write(KEY_MEDIA_PLAY_PAUSE);

  //     delay(1000);
  //   }
  //   if (digitalRead(NEXT_TRACK) == LOW)
  //   {
  //     digitalWrite(LED_BUILTIN, HIGH);
  //     bleKeyboard.write(KEY_MEDIA_NEXT_TRACK);

  //     delay(1000);
  //   }

  //   digitalWrite(LED_BUILTIN, LOW);

  //   // ---------------------
  //   // Serial.println("Sending 'Hello world'...");
  //   // bleKeyboard.print("Hello world");

  //   // delay(1000);

  //   // Serial.println("Sending Enter key...");
  //   // bleKeyboard.write(KEY_RETURN);

  //   // delay(1000);

  //   // Serial.println("Sending Play/Pause media key...");
  //   // bleKeyboard.write(KEY_MEDIA_PLAY_PAUSE);

  //   // delay(1000);

  //   //
  //   // Below is an example of pressing multiple keyboard modifiers
  //   // which by default is commented out.
  //   //
  //   /* Serial.println("Sending Ctrl+Alt+Delete...");
  //   bleKeyboard.press(KEY_LEFT_CTRL);
  //   bleKeyboard.press(KEY_LEFT_ALT);
  //   bleKeyboard.press(KEY_DELETE);
  //   delay(100);
  //   bleKeyboard.releaseAll();
  //   */
  // }
  // Serial.println("Waiting 5 seconds...");
  // delay(5000);
}
